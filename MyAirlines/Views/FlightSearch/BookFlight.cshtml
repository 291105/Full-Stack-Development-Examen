@model MyAirlines.ViewModels.BookingVM

<h2>Boekingsdetails</h2>
<link href="~/css/BookFlight.css" rel="stylesheet" type="text/css" />

@if (TempData["ErrorMessage"] != null)
{
    <script>
        alert('@TempData["ErrorMessage"]');
    </script>
}

<h2>Boekingsdetails</h2>
<link href="~/css/BookFlight.css" rel="stylesheet" type="text/css" />
<form method="post" action="@Url.Action("BookFlight", "FlightSearch")">
    @for (int i = 0; i < Model.Passengers.Count; i++)
    {
        var passenger = Model.Passengers[i];
        <div class="passenger-container" data-index="@i">
            <h3>Passagier @(i + 1)</h3>

            <div class="passenger-info">
                <strong>Klasse:</strong> @passenger.Class.Name
                <input type="hidden" name="Passengers[@i].Class.Name" value="@passenger.Class.Name" />
            </div>

            <div class="meals">
                <strong>Maaltijden:</strong>
                @if (passenger.Meals != null && passenger.Meals.Count > 0)
                {
                    <div class="container">
                        @foreach (var meal in passenger.Meals)
                        {
                            @await Html.PartialAsync("DisplayTemplates/_MealTemplate", meal)
                        }
                    </div>
                    <input type="hidden" name="Passengers[@i].SelectedMealID" class="selectedMealInput" />
                }
                else
                {
                    <span>No meals available</span>
                }
            </div>

            <!-- Foutmelding voor niet geselecteerde maaltijd -->
            <div class="error-message" style="color: red; display: none;">Selecteer een maaltijd</div>

            <div class="price">
                <p>Price: €<span class="ticketPrice">@passenger.TicketPrice.ToString("0.00")</span></p>
                <input type="hidden" name="Passengers[@i].TicketPrice" class="ticketPriceInput" value="@passenger.TicketPrice.ToString("0.00", System.Globalization.CultureInfo.InvariantCulture)" />
            </div>

            <div class="personal-info">
                <label for="FirstName_@i">Voornaam</label>
                <input required type="text" name="Passengers[@i].FirstName" id="FirstName_@i" class="form-control" value="@passenger.FirstName" />

                <label for="LastName_@i">Achternaam</label>
                <input required type="text" name="Passengers[@i].LastName" id="LastName_@i" class="form-control" value="@passenger.LastName" />

                <label for="NationalRegisterNumber_@i">Rijksregisternummer</label>
                <input required type="text" name="Passengers[@i].NationalRegisterNumber" id="NationalRegisterNumber_@i" class="form-control" value="@passenger.NationalRegisterNumber" />
            </div>
        </div>
        <hr />
    }

    <div class="price">
        <p>Total: €<span id="totalPricePerBooking">@Model.TotalPricePerBooking.ToString("0.00")</span></p>
        <input type="hidden" name="TotalPricePerBooking" id="hiddenTotalPrice" value="@Model.TotalPricePerBooking.ToString("0.00", System.Globalization.CultureInfo.InvariantCulture)" />
    </div>
    <button type="submit" class="btn btn-primary">Verzend boeking</button>
</form>


<script>
document.addEventListener('DOMContentLoaded', function () {
    const form = document.querySelector('form');
    const passengers = document.querySelectorAll('.passenger-container');
    const errorMessage = document.querySelector('.error-message');
    let formIsValid = true;

    function updateTotalBookingPrice() {
        let total = 0;
        passengers.forEach(passenger => {
            const priceInput = passenger.querySelector('.ticketPriceInput');
            const value = parseFloat(priceInput.value);
            if (!isNaN(value)) total += value;
        });

        document.getElementById('totalPricePerBooking').innerText = total.toFixed(2).replace('.', ',');
        document.getElementById('hiddenTotalPrice').value = total.toFixed(2);
    }

    passengers.forEach(passenger => {
        const mealOptions = passenger.querySelectorAll('.mealOption');
        const ticketPriceSpan = passenger.querySelector('.ticketPrice');
        const ticketPriceInput = passenger.querySelector('.ticketPriceInput');
        const selectedMealInput = passenger.querySelector('.selectedMealInput');

        let basePrice = parseFloat(ticketPriceInput.value);

        mealOptions.forEach(meal => {
            meal.addEventListener('click', function () {
                const price = parseFloat(meal.dataset.price);
                const mealId = meal.dataset.mealId;

                // Toggle selectie
                mealOptions.forEach(m => m.classList.remove('selected'));
                meal.classList.add('selected');
                selectedMealInput.value = mealId;

                const totalPrice = basePrice + price;
                ticketPriceSpan.innerText = totalPrice.toFixed(2).replace('.', ',');
                ticketPriceInput.value = totalPrice.toFixed(2);

                updateTotalBookingPrice();
            });
        });
    });

    updateTotalBookingPrice();
});

</script>




